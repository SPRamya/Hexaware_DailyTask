
Task 8

using System;

// Account Class
class Account
{
    public int AccountNumber { get; set; }
    public string AccountType { get; set; }
    public double Balance { get; protected set; }
    protected const double InterestRate = 4.5;
    protected const double OverdraftLimit = 500; // Overdraft limit for Current Account

    public Account(int accNum, string accType, double balance)
    {
        AccountNumber = accNum;
        AccountType = accType;
        Balance = balance;
    }

    public void Deposit(float amount)
    {
        Deposit(Convert.ToDouble(amount));
    }
    
    public void Deposit(int amount)
    {
        Deposit(Convert.ToDouble(amount));
    }
    
    public virtual void Deposit(double amount)
    {
        if (amount > 0)
        {
            Balance += amount;
            Console.WriteLine($"Deposited {amount:C}. New Balance: {Balance:C}");
        }
        else
        {
            Console.WriteLine("Deposit amount must be positive.");
        }
    }

    public void Withdraw(float amount)
    {
        Withdraw(Convert.ToDouble(amount));
    }
    
    public void Withdraw(int amount)
    {
        Withdraw(Convert.ToDouble(amount));
    }
    
    public virtual void Withdraw(double amount)
    {
        if (amount > 0 && amount <= Balance)
        {
            Balance -= amount;
            Console.WriteLine($"Withdrawn {amount:C}. New Balance: {Balance:C}");
        }
        else
        {
            Console.WriteLine("Insufficient balance or invalid amount.");
        }
    }

    public virtual void CalculateInterest()
    {
        Console.WriteLine("Interest calculation is only applicable for savings accounts.");
    }
}

// Savings Account Class
class SavingsAccount : Account
{
    public SavingsAccount(int accNum, double balance) : base(accNum, "Savings", balance) { }

    public override void CalculateInterest()
    {
        double interest = (Balance * InterestRate) / 100;
        Balance += interest;
        Console.WriteLine($"Interest of {interest:C} added. New Balance: {Balance:C}");
    }
}

// Current Account Class
class CurrentAccount : Account
{
    public CurrentAccount(int accNum, double balance) : base(accNum, "Current", balance) { }

    public override void Withdraw(double amount)
    {
        if (amount > 0 && (Balance - amount) >= -OverdraftLimit)
        {
            Balance -= amount;
            Console.WriteLine($"Withdrawn {amount:C}. New Balance: {Balance:C}");
        }
        else
        {
            Console.WriteLine("Overdraft limit exceeded or invalid amount.");
        }
    }
}

// Bank Class
class Bank
{
    static void Main()
    {
        Console.Write("Enter Account Number: ");
        int accountNumber = int.Parse(Console.ReadLine());
        Console.WriteLine("Select Account Type: \n1. Savings Account\n2. Current Account");
        int choice = int.Parse(Console.ReadLine());
        Account account;

        switch (choice)
        {
            case 1:
                Console.Write("Enter Initial Balance: ");
                double savingsBalance = double.Parse(Console.ReadLine());
                account = new SavingsAccount(accountNumber, savingsBalance);
                break;
            case 2:
                Console.Write("Enter Initial Balance: ");
                double currentBalance = double.Parse(Console.ReadLine());
                account = new CurrentAccount(accountNumber, currentBalance);
                break;
            default:
                Console.WriteLine("Invalid selection. Defaulting to Savings Account.");
                Console.Write("Enter Initial Balance: ");
                double defaultBalance = double.Parse(Console.ReadLine());
                account = new SavingsAccount(accountNumber, defaultBalance);
                break;
        }

        Console.Write("Enter amount to deposit: ");
        double depositAmount = double.Parse(Console.ReadLine());
        account.Deposit(depositAmount);

        Console.Write("Enter amount to withdraw: ");
        double withdrawAmount = double.Parse(Console.ReadLine());
        account.Withdraw(withdrawAmount);

        account.CalculateInterest();
    }
}


Task 9

using System;

// Abstract class representing a bank account
abstract class BankAccount
{
    public string AccountNumber { get; set; }
    public string CustomerName { get; set; }
    public float Balance { get; protected set; }

    public BankAccount() { }
    public BankAccount(string accountNumber, string customerName, float balance)
    {
        AccountNumber = accountNumber;
        CustomerName = customerName;
        Balance = balance;
    }

    public void PrintAccountInfo()
    {
        Console.WriteLine($"Account Number: {AccountNumber}\nCustomer Name: {CustomerName}\nBalance: {Balance:C}");
    }

    public abstract void Deposit(float amount);
    public abstract void Withdraw(float amount);
    public abstract void CalculateInterest();
}

// Savings Account
class SavingsAccount : BankAccount
{
    private float interestRate;

    public SavingsAccount(string accountNumber, string customerName, float balance, float interestRate)
        : base(accountNumber, customerName, balance)
    {
        this.interestRate = interestRate;
    }

    public override void Deposit(float amount)
    {
        Balance += amount;
        Console.WriteLine($"Deposited {amount:C}. New Balance: {Balance:C}");
    }

    public override void Withdraw(float amount)
    {
        if (amount > Balance)
        {
            Console.WriteLine("Insufficient balance.");
        }
        else
        {
            Balance -= amount;
            Console.WriteLine($"Withdrawn {amount:C}. New Balance: {Balance:C}");
        }
    }

    public override void CalculateInterest()
    {
        float interest = Balance * (interestRate / 100);
        Balance += interest;
        Console.WriteLine($"Interest Added: {interest:C}. New Balance: {Balance:C}");
    }
}

// Current Account
class CurrentAccount : BankAccount
{
    private const float OverdraftLimit = 500.0f;

    public CurrentAccount(string accountNumber, string customerName, float balance)
        : base(accountNumber, customerName, balance) { }

    public override void Deposit(float amount)
    {
        Balance += amount;
        Console.WriteLine($"Deposited {amount:C}. New Balance: {Balance:C}");
    }

    public override void Withdraw(float amount)
    {
        if (amount > Balance + OverdraftLimit)
        {
            Console.WriteLine("Overdraft limit exceeded.");
        }
        else
        {
            Balance -= amount;
            Console.WriteLine($"Withdrawn {amount:C}. New Balance: {Balance:C}");
        }
    }

    public override void CalculateInterest()
    {
        Console.WriteLine("No interest for Current Account.");
    }
}

// Bank class to manage accounts
class Bank
{
    static void Main()
    {
        BankAccount account = null;
        Console.WriteLine("Choose Account Type:\n1. Savings Account\n2. Current Account");
        int choice = int.Parse(Console.ReadLine());

        Console.Write("Enter Account Number: ");
        string accNumber = Console.ReadLine();
        Console.Write("Enter Customer Name: ");
        string name = Console.ReadLine();
        Console.Write("Enter Initial Balance: ");
        float balance = float.Parse(Console.ReadLine());

        switch (choice)
        {
            case 1:
                Console.Write("Enter Interest Rate (%): ");
                float rate = float.Parse(Console.ReadLine());
                account = new SavingsAccount(accNumber, name, balance, rate);
                break;
            case 2:
                account = new CurrentAccount(accNumber, name, balance);
                break;
            default:
                Console.WriteLine("Invalid choice.");
                return;
        }

        account.PrintAccountInfo();

        while (true)
        {
            Console.WriteLine("\nChoose an action:\n1. Deposit\n2. Withdraw\n3. Calculate Interest\n4. Exit");
            int action = int.Parse(Console.ReadLine());

            switch (action)
            {
                case 1:
                    Console.Write("Enter amount to deposit: ");
                    float depositAmount = float.Parse(Console.ReadLine());
                    account.Deposit(depositAmount);
                    break;
                case 2:
                    Console.Write("Enter amount to withdraw: ");
                    float withdrawAmount = float.Parse(Console.ReadLine());
                    account.Withdraw(withdrawAmount);
                    break;
                case 3:
                    account.CalculateInterest();
                    break;
                case 4:
                    Console.WriteLine("Exiting...");
                    return;
                default:
                    Console.WriteLine("Invalid action.");
                    break;
            }
        }
    }
}


Task 10
using System;
using System.Collections.Generic;

// Customer Class
class Customer
{
    public int CustomerID { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string Email { get; set; }
    public string PhoneNumber { get; set; }
    public string Address { get; set; }

    public Customer() { }

    public Customer(int customerID, string firstName, string lastName, string email, string phoneNumber, string address)
    {
        CustomerID = customerID;
        FirstName = firstName;
        LastName = lastName;
        Email = IsValidEmail(email) ? email : "Invalid Email";
        PhoneNumber = IsValidPhoneNumber(phoneNumber) ? phoneNumber : "Invalid Phone Number";
        Address = address;
    }

    private bool IsValidEmail(string email)
    {
        return email.Contains("@") && email.Contains(".");
    }

    private bool IsValidPhoneNumber(string phoneNumber)
    {
        if (phoneNumber.Length != 10) return false;
        foreach (char c in phoneNumber)
        {
            if (!char.IsDigit(c)) return false;
        }
        return true;
    }

    public void PrintCustomerInfo()
    {
        Console.WriteLine("Customer Details:");
        Console.WriteLine("ID: " + CustomerID);
        Console.WriteLine("Name: " + FirstName + " " + LastName);
        Console.WriteLine("Email: " + Email);
        Console.WriteLine("Phone: " + PhoneNumber);
        Console.WriteLine("Address: " + Address);
        Console.WriteLine();
    }
}

// Account Class
class Account
{
    private static long accountNumberSeed = 1001;
    public long AccountNumber { get; }
    public string AccountType { get; set; }
    public float Balance { get; private set; }
    public Customer AccountHolder { get; }

    public Account(string accountType, float initialBalance, Customer customer)
    {
        AccountNumber = accountNumberSeed;
        accountNumberSeed++;
        AccountType = accountType;
        Balance = initialBalance;
        AccountHolder = customer;
    }

    public void Deposit(float amount)
    {
        Balance += amount;
        Console.WriteLine("Deposited: " + amount + " | New Balance: " + Balance);
    }

    public bool Withdraw(float amount)
    {
        if (amount > Balance)
        {
            Console.WriteLine("Insufficient funds.");
            return false;
        }
        Balance -= amount;
        Console.WriteLine("Withdrawn: " + amount + " | New Balance: " + Balance);
        return true;
    }

    public void PrintAccountDetails()
    {
        Console.WriteLine("Account Details:");
        Console.WriteLine("Account Number: " + AccountNumber);
        Console.WriteLine("Type: " + AccountType);
        Console.WriteLine("Balance: " + Balance);
        AccountHolder.PrintCustomerInfo();
    }
}

// Bank Class
class Bank
{
    private List<Account> accounts = new List<Account>();

    public Account CreateAccount(Customer customer, string accountType, float initialBalance)
    {
        Account newAccount = new Account(accountType, initialBalance, customer);
        accounts.Add(newAccount);
        Console.WriteLine("Account created successfully!");
        return newAccount;
    }

    public float GetAccountBalance(long accountNumber)
    {
        foreach (var acc in accounts)
        {
            if (acc.AccountNumber == accountNumber)
            {
                return acc.Balance;
            }
        }
        throw new Exception("Account not found.");
    }

    public void Deposit(long accountNumber, float amount)
    {
        foreach (var acc in accounts)
        {
            if (acc.AccountNumber == accountNumber)
            {
                acc.Deposit(amount);
                return;
            }
        }
        Console.WriteLine("Account not found.");
    }

    public void Withdraw(long accountNumber, float amount)
    {
        foreach (var acc in accounts)
        {
            if (acc.AccountNumber == accountNumber)
            {
                acc.Withdraw(amount);
                return;
            }
        }
        Console.WriteLine("Account not found.");
    }

    public void Transfer(long fromAccount, long toAccount, float amount)
    {
        Account sender = null, receiver = null;
        foreach (var acc in accounts)
        {
            if (acc.AccountNumber == fromAccount) sender = acc;
            if (acc.AccountNumber == toAccount) receiver = acc;
        }
        
        if (sender == null || receiver == null)
        {
            Console.WriteLine("One or both accounts not found.");
            return;
        }
        
        if (sender.Withdraw(amount))
        {
            receiver.Deposit(amount);
            Console.WriteLine("Transfer successful.");
        }
    }

    public void GetAccountDetails(long accountNumber)
    {
        foreach (var acc in accounts)
        {
            if (acc.AccountNumber == accountNumber)
            {
                acc.PrintAccountDetails();
                return;
            }
        }
        Console.WriteLine("Account not found.");
    }
}

 

Task 10

using System;
using System.Collections.Generic;

// Bank Application
class BankApp
{
    static void Main()
    {
        Bank bank = new Bank();
        while (true)
        {
            Console.WriteLine("\nBanking System Menu:");
            Console.WriteLine("1. Create Account");
            Console.WriteLine("2. Deposit");
            Console.WriteLine("3. Withdraw");
            Console.WriteLine("4. Get Balance");
            Console.WriteLine("5. Transfer");
            Console.WriteLine("6. Get Account Details");
            Console.WriteLine("7. Exit");
            Console.Write("Enter your choice: ");

            string choice = Console.ReadLine();
            switch (choice)
            {
                case "1":
                    Console.Write("Enter First Name: ");
                    string firstName = Console.ReadLine();
                    Console.Write("Enter Last Name: ");
                    string lastName = Console.ReadLine();
                    Console.Write("Enter Email: ");
                    string email = Console.ReadLine();
                    Console.Write("Enter Phone Number: ");
                    string phone = Console.ReadLine();
                    Console.Write("Enter Address: ");
                    string address = Console.ReadLine();

                    Customer newCustomer = new Customer(new Random().Next(1000, 9999), firstName, lastName, email, phone, address);

                    Console.Write("Enter Account Type (Savings/Current): ");
                    string accType = Console.ReadLine();
                    Console.Write("Enter Initial Balance: ");
                    float balance = float.Parse(Console.ReadLine());

                    bank.CreateAccount(newCustomer, accType, balance);
                    break;

                case "2":
                    Console.Write("Enter Account Number: ");
                    long depositAcc = long.Parse(Console.ReadLine());
                    Console.Write("Enter Amount: ");
                    float depositAmount = float.Parse(Console.ReadLine());
                    bank.Deposit(depositAcc, depositAmount);
                    break;

                case "3":
                    Console.Write("Enter Account Number: ");
                    long withdrawAcc = long.Parse(Console.ReadLine());
                    Console.Write("Enter Amount: ");
                    float withdrawAmount = float.Parse(Console.ReadLine());
                    bank.Withdraw(withdrawAcc, withdrawAmount);
                    break;

                case "4":
                    Console.Write("Enter Account Number: ");
                    long balanceAcc = long.Parse(Console.ReadLine());
                    Console.WriteLine("Current Balance: " + bank.GetAccountBalance(balanceAcc));
                    break;

                case "5":
                    Console.Write("Enter Sender Account Number: ");
                    long fromAcc = long.Parse(Console.ReadLine());
                    Console.Write("Enter Receiver Account Number: ");
                    long toAcc = long.Parse(Console.ReadLine());
                    Console.Write("Enter Amount: ");
                    float transferAmount = float.Parse(Console.ReadLine());
                    bank.Transfer(fromAcc, toAcc, transferAmount);
                    break;

                case "6":
                    Console.Write("Enter Account Number: ");
                    long detailsAcc = long.Parse(Console.ReadLine());
                    bank.GetAccountDetails(detailsAcc);
                    break;

                case "7":
                    Console.WriteLine("Exiting Banking System. Goodbye!");
                    return;

                default:
                    Console.WriteLine("Invalid choice. Please try again.");
                    break;
            }
        }
    }
}


Task 11

using System;
using System.Collections.Generic;

namespace BankingSystem
{
    // Customer class
    public class Customer
    {
        public int CustomerID { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public string Address { get; set; }

        public Customer() { }

        public Customer(int id, string firstName, string lastName, string email, string phone, string address)
        {
            CustomerID = id;
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            PhoneNumber = phone;
            Address = address;
        }

        public void PrintCustomerInfo()
        {
            Console.WriteLine($"Customer ID: {CustomerID}, Name: {FirstName} {LastName}, Email: {Email}, Phone: {PhoneNumber}, Address: {Address}");
        }
    }

        // Account class
    public class Account
    {
        private static long lastAccNo = 1000000000;
        public long AccountNumber { get; }
        public string AccountType { get; set; }
        public float AccountBalance { get; set; }
        public Customer AccountHolder { get; set; }

        public Account(string accountType, float balance, Customer customer)
        {
            AccountNumber = ++lastAccNo;
            AccountType = accountType;
            AccountBalance = balance;
            AccountHolder = customer;
        }

        public void PrintAccountInfo()
        {
            Console.WriteLine($"Account No: {AccountNumber}, Type: {AccountType}, Balance: {AccountBalance}");
            AccountHolder.PrintCustomerInfo();
        }
    }

    // Derived Accounts
    public class SavingsAccount : Account
    {
        public float InterestRate { get; set; }
        public SavingsAccount(float balance, float interestRate, Customer customer) 
            : base("Savings", balance < 500 ? 500 : balance, customer)
        {
            InterestRate = interestRate;
        }
    }

    public class CurrentAccount : Account
    {
        public float OverdraftLimit { get; set; }
        public CurrentAccount(float balance, float overdraftLimit, Customer customer) 
            : base("Current", balance, customer)
        {
            OverdraftLimit = overdraftLimit;
        }

        public bool Withdraw(float amount)
        {
            if (AccountBalance - amount >= -OverdraftLimit)
            {
                AccountBalance -= amount;
                Console.WriteLine($"Withdrawal successful. New balance: {AccountBalance}");
                return true;
            }
            Console.WriteLine("Overdraft limit exceeded. Withdrawal denied.");
            return false;
        }
    }

    public class ZeroBalanceAccount : Account
    {
        public ZeroBalanceAccount(Customer customer) : base("ZeroBalance", 0, customer) { }
    }

// ICustomerServiceProvider Interface
    public interface ICustomerServiceProvider
    {
        float GetAccountBalance(long accountNumber);
        float Deposit(long accountNumber, float amount);
        float Withdraw(long accountNumber, float amount);
        bool Transfer(long fromAccountNumber, long toAccountNumber, float amount);
        void GetAccountDetails(long accountNumber);
    }


// IBankServiceProvider Interface
    public interface IBankServiceProvider
    {
        Account CreateAccount(Customer customer, long accNo, string accType, float balance);
        Account[] ListAccounts();
        void CalculateInterest();
    }





   Task 11 continue 
 // CustomerServiceProvider Implementation
    public class CustomerServiceProviderImpl : ICustomerServiceProvider
    {
        protected List<Account> accounts = new List<Account>();

        public float GetAccountBalance(long accountNumber)
        {
            foreach (var account in accounts)
            {
                if (account.AccountNumber == accountNumber)
                {
                    return account.AccountBalance;
                }
            }
            throw new Exception("Account not found");
        }

        public float Deposit(long accountNumber, float amount)
        {
            foreach (var account in accounts)
            {
                if (account.AccountNumber == accountNumber)
                {
                    account.AccountBalance += amount;
                    return account.AccountBalance;
                }
            }
            throw new Exception("Account not found");
        }

        public float Withdraw(long accountNumber, float amount)
        {
            foreach (var account in accounts)
            {
                if (account.AccountNumber == accountNumber)
                {
                    if (account is SavingsAccount && account.AccountBalance - amount < 500)
                    {
                        throw new Exception("Minimum balance requirement not met");
                    }
                    if (account is CurrentAccount currentAccount)
                    {
                        return currentAccount.Withdraw(amount) ? currentAccount.AccountBalance : throw new Exception("Overdraft limit exceeded");
                    }
                    if (account.AccountBalance >= amount)
                    {
                        account.AccountBalance -= amount;
                        return account.AccountBalance;
                    }
                    throw new Exception("Insufficient funds");
                }
            }
            throw new Exception("Account not found");
        }

        public bool Transfer(long fromAccountNumber, long toAccountNumber, float amount)
        {
            float withdrawnAmount = Withdraw(fromAccountNumber, amount);
            Deposit(toAccountNumber, withdrawnAmount);
            return true;
        }

        public void GetAccountDetails(long accountNumber)
        {
            foreach (var account in accounts)
            {
                if (account.AccountNumber == accountNumber)
                {
                    account.PrintAccountInfo();
                    return;
                }
            }
            throw new Exception("Account not found");
        }
    }

    // BankServiceProvider Implementation
    public class BankServiceProviderImpl : CustomerServiceProviderImpl, IBankServiceProvider
    {
        public string BranchName { get; set; }
        public string BranchAddress { get; set; }

        public Account CreateAccount(Customer customer, long accNo, string accType, float balance)
        {
            Account account;
            if (accType == "Savings")
            {
                account = new SavingsAccount(balance, 2.5f, customer);
            }
            else if (accType == "Current")
            {
                account = new CurrentAccount(balance, 1000, customer);
            }
            else if (accType == "ZeroBalance")
            {
                account = new ZeroBalanceAccount(customer);
            }
            else
            {
                throw new Exception("Invalid account type");
            }
            accounts.Add(account);
            return account;
        }

        public Account[] ListAccounts()
        {
            return accounts.ToArray();
        }

        public void CalculateInterest()
        {
            foreach (var account in accounts)
            {
                if (account is SavingsAccount savingsAccount)
                {
                    savingsAccount.AccountBalance += savingsAccount.AccountBalance * (savingsAccount.InterestRate / 100);
                }
            }
        }
    }
}





using System;
using System.Collections.Generic;

namespace BankingSystem
{
    public class BankApp
    {
        public static void Main()
        {
            BankServiceProviderImpl bankService = new BankServiceProviderImpl();
            while (true)
            {
                Console.WriteLine("\nBanking System Menu:");
                Console.WriteLine("1. Create Account");
                Console.WriteLine("2. Deposit");
                Console.WriteLine("3. Withdraw");
                Console.WriteLine("4. Get Balance");
                Console.WriteLine("5. Transfer");
                Console.WriteLine("6. Get Account Details");
                Console.WriteLine("7. List Accounts");
                Console.WriteLine("8. Exit");
                Console.Write("Enter your choice: ");

                int choice = int.Parse(Console.ReadLine());
                if (choice == 8) break;

                switch (choice)
                {
                    case 1:
                        Console.Write("Enter Customer Name: ");
                        string name = Console.ReadLine();
                        Customer customer = new Customer(name);

                        Console.WriteLine("Choose Account Type: 1. Savings 2. Current 3. ZeroBalance");
                        int accTypeChoice = int.Parse(Console.ReadLine());
                        string accType = accTypeChoice == 1 ? "Savings" : accTypeChoice == 2 ? "Current" : "ZeroBalance";
                        
                        Console.Write("Enter Initial Balance: ");
                        float balance = float.Parse(Console.ReadLine());

                        bankService.CreateAccount(customer, 0, accType, balance);
                        Console.WriteLine("Account Created Successfully!");
                        break;
                    
                    case 2:
                        Console.Write("Enter Account Number: ");
                        long accNo = long.Parse(Console.ReadLine());
                        Console.Write("Enter Deposit Amount: ");
                        float depositAmount = float.Parse(Console.ReadLine());
                        bankService.Deposit(accNo, depositAmount);
                        Console.WriteLine("Deposit Successful!");
                        break;

                    case 3:
                        Console.Write("Enter Account Number: ");
                        long withdrawAccNo = long.Parse(Console.ReadLine());
                        Console.Write("Enter Withdraw Amount: ");
                        float withdrawAmount = float.Parse(Console.ReadLine());
                        bankService.Withdraw(withdrawAccNo, withdrawAmount);
                        Console.WriteLine("Withdrawal Successful!");
                        break;

                    case 4:
                        Console.Write("Enter Account Number: ");
                        long balanceAccNo = long.Parse(Console.ReadLine());
                        Console.WriteLine("Current Balance: " + bankService.GetAccountBalance(balanceAccNo));
                        break;

                    case 5:
                        Console.Write("Enter From Account Number: ");
                        long fromAccNo = long.Parse(Console.ReadLine());
                        Console.Write("Enter To Account Number: ");
                        long toAccNo = long.Parse(Console.ReadLine());
                        Console.Write("Enter Transfer Amount: ");
                        float transferAmount = float.Parse(Console.ReadLine());
                        bankService.Transfer(fromAccNo, toAccNo, transferAmount);
                        Console.WriteLine("Transfer Successful!");
                        break;

                    case 6:
                        Console.Write("Enter Account Number: ");
                        long detailsAccNo = long.Parse(Console.ReadLine());
                        bankService.GetAccountDetails(detailsAccNo);
                        break;

                    case 7:
                        foreach (var acc in bankService.ListAccounts())
                        {
                            acc.PrintAccountInfo();
                        }
                        break;

                    default:
                        Console.WriteLine("Invalid Choice. Please Try Again.");
                        break;
                }
            }
        }
    }
}


